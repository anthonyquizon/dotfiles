if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'luochen1990/rainbow'
Plug 'nanotech/jellybeans.vim'
Plug 'scrooloose/nerdcommenter'
"Plug 'sheerun/vim-polyglot'
Plug 'kovisoft/paredit'
Plug 'jparise/vim-graphql'
Plug 'tpope/vim-fugitive'
Plug 'mbbill/undotree'
Plug 'mattn/emmet-vim'
call plug#end()



inoremap jk <esc>
filetype indent plugin on
syntax on

set autoindent
set laststatus=2
set relativenumber
set nu
set nopaste
set nowrap
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set nohlsearch
set smartcase
set cursorline
set noswapfile
set nobackup nowritebackup
set undofile
set undodir=~/.vim/undodir
set backupcopy=yes
set nobackup
set backspace=indent,eol,start
set hlsearch


colorscheme jellybeans

let mapleader = "\<Space>"
let maplocalleader = ","


vmap <silent> <leader>y y:new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/.vim/reg<CR>
nmap <silent> <leader>y :new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/.vim/reg<CR>
map <silent> <leader>p :sview ~/.vim/reg<CR>"zdddG:q!<CR>:call setreg('"', @", @z)<CR>p
map <silent> <leader>P :sview ~/.vim/reg<CR>"zdddG:q!<CR>:call setreg('"', @", @z)<CR>P

" disable lower case mapping
xnoremap u <nop>
xnoremap K <nop>

" ===== Search and Replace =====
" TODO put into command line window
" TODO escape slashes or use '|' instead?
vnoremap <leader>s "vy :%s/<C-R>v//g<Left><Left>
vnoremap <leader>S "vy :%s//<C-R>v/g<C-b><Right><Right><Right>

nnoremap <leader>s :%sno/<C-R><C-W>//g<Left><Left>
nnoremap <leader>S :%sno//<C-R><C-W>/g<C-b><Right><Right><Right><Right><Right>

" === Search Highlight ===
nnoremap <leader>l :noh<CR>

" === Scroll reset
nnoremap <leader>0 :set scroll=0<CR>

" ===== NETRW ======
let g:netrw_banner = 0
"==================

" stay selected when visual mode indenting
vmap < <gv
vmap > >gv

" Force override ambiguous commands (eg. elm-make)
command! E Explore
command! Qa qa
command! WQ wq
command! Wq wq
command! W w
command! Q q
nnoremap Q <nop>

" Reference: http://www.alecjacobson.com/weblog/?p=443
" Enter Digraph
inoremap <C-o> <C-k>

" shuffle line one up or down: autocmd to force override plugin mappings
autocmd VimEnter * nnoremap <C-j> :m .+1<CR>==
autocmd VimEnter * nnoremap <C-k> :m .-2<CR>==
autocmd VimEnter * inoremap <C-j> <Esc>:m .+1<CR>==gi
autocmd VimEnter * inoremap <C-k> <Esc>:m .-2<CR>==gi
autocmd VimEnter * vnoremap <C-j> :m '>+1<CR>gv=gv
autocmd VimEnter * vnoremap <C-k> :m '<-2<CR>gv=gv

"===== FZF ======
let unicode = { 
    \ 'subset equal': '⊆',
    \ 'subset': '⊂'
    \ }

" ignore filenames in rg search
command! -bang -nargs=* RgNoFilename call fzf#vim#grep(
            \ "rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 
            \ 1, 
            \ fzf#vim#with_preview({ 'options': '--delimiter : --nth 4..' }),
            \ 0)

" show unregistered Git files in search
command! CustomGitFiles call fzf#run(fzf#wrap(fzf#vim#with_preview({
            \ 'source': 'git ls-files --exclude-standard --cached --others',
            \ })))


noremap <leader>/ :RgNoFilename<CR>
noremap <leader>. :Rg<CR>
noremap <leader>x :Commands<CR>
noremap <leader>b :Buffers<CR>
noremap <leader>m :History<CR>
noremap <leader>a :Maps<CR>
noremap <leader>f :BLines<CR>
noremap <leader>u :UndotreeToggle<CR>
noremap <leader><leader> :CustomGitFiles<CR>

noremap <silent> <leader>! :Gstatus<CR>

noremap <leader>` :set number! relativenumber!<CR>
noremap ` :set relativenumber!<CR>

"======= Rainbow Parens =======
let g:rainbow_active = 1
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['darkblue', 'darkgreen', 'darkcyan', 'darkmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \   }
            \}

" ==== NERD Commenter ===
noremap <leader>; :call NERDComment(1, 'toggle')<CR>

" === JSON ====
noremap <leader>json :%!python3 -m json.tool<CR>

" === ALE ====
nmap <silent> <leader>n :ALENextWrap<cr>
nmap <silent> <leader>N :ALEPreviousWrap<cr>

" === Unicode Input ===
let unimap = [
    \["a",   "α"],
    \["aa",  "α"],
    \["a'",  "ά"],
    \["b",   "β"],
    \["bi",  "ʘ"],
    \["i",   "ι"],
    \["ii",  "ι"],
    \["r",   "ρ"],
    \["Ps",   "Ψ"],
    \["PS",   "Ψ"],
    \["ps",   "φ"],
    \["o",   "୦"],
    \["oo",   "୦"],
    \["j",   "०"],
    \["jj",  "०"],
    \["del", "Δ"],
    \["tri", "Δ"],
    \["tru", "匕"],
    \["fa",  "厅"],
    \["th",  "θ"],
    \["e",   "ε"],
    \["ee",  "ε"],
    \["em",  "Ø"],
    \["w",   "ω"],
    \["ww",  "ω"],
    \["O",   "Ω"],
    \["G",   "Γ"],
    \["g",   "γ"],
    \["y",   "γ"],
    \["Pi",  "Π"],
    \["pi",  "π"],
    \["Ph",  "ϕ"],
    \["ph",  "Φ"],
    \["S",   "Σ"],
    \["s",   "σ"],
    \["ss",  "σ"],
    \["so",  "σ"],
    \["xs",  "σ"],
    \["Z",   "ℤ"],
    \["U",   "ㄩ"],
    \["N",  "ㄇ"],
    \["/",   "ㄖ"],
    \["//",  "ㄖ"],
    \["ro",  "ロ"],
    \["[]",  "ロ"],
    \["sq",  "ロ"],
    \["<<",  "ㄍ"],
    \["st",  "つ"],
    \["stt",  "つ"],
    \["st'",  "づ"],
    \["]",   "コ"],
    \["]]",  "コ"],
    \["}}",  "カ"],
    \["co",  "カ"],
    \["}",   "カ"],
    \["}'",  "ガ"],
    \["]'",  "ゴ"],
    \[",,",  "く"],
    \[",'",  "ぐ"],
    \["Re",  "ℝ"],
    \["bt",  "丄"],
    \["tp",  "丅"],
    \["ex",  "ヨ"],
    \["li",  "一"],
    \["-",   "一"],
    \["--",  "一"],
    \["en",  "三"],
    \["sm",  "シ"],
    \["si",  "し"],
    \["sii",  "し"],
    \["si'",  "じ"],
    \["ch",  "の"],
    \["do",  "ひ"],
    \["bo",  "ろ"],
    \["ub",  "ㄅ"],
    \["vo",  "ʘ"],
    \[".",   "・"],
    \["..,",   "・"],
    \["?",  "叵"],
    \["in", "ㄙ"],
    \["uu", "ㄋ"],
    \["ul", "〆"],
    \["mu", "ㄓ"],
    \["'", "ʽ"],
    \["''", "ʽ"],
    \["cm", "०"],
    \["d", "δ"],
    \["dd", "δ"],
    \["jss", "ち"], 
    \["js", "ち"], 
    \["js'", "ぢ"], 
    \["ha", "サ"],
    \["haa", "サ"],
    \["ha'", "ザ"],
    \["fi", "冋"],
\]

"冎
"
"스
"느
"巨
"冂冃冄内円

let uniprefix = '`'

for i in range(len(unimap))
    exe 'lmap ' . uniprefix . unimap[i][0] . ' ' . unimap[i][1]
    exe 'imap ' . uniprefix . unimap[i][0] . ' ' . unimap[i][1]
    exe 'tmap ' . uniprefix . unimap[i][0] . ' ' . unimap[i][1]
    exe 'cmap ' . uniprefix . unimap[i][0] . ' ' . unimap[i][1]
endfor

