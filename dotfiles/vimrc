scripte utf-8 
set shell=/bin/bash
set nocompatible autoindent laststatus=2 relativenumber nu smartcase nopaste nowrap expandtab hidden
set noswapfile nobackup nowritebackup shiftwidth=4 softtabstop=4 tabstop=4 is ttimeoutlen=100   " ttimeout to stop esc hanging on : commands
set backspace=indent,eol,start hlsearch path+=** wildmenu autoread undofile undodir=~/.vim/undodir 
set grepprg=rg\ --vimgrep|set complete= |set grepformat^=%f:%l:%c:%m|set viminfo='50,<200,s100  " increase vim register limit so that we can copy more data between instances 
au FileType python setlocal noexpandtab softtabstop=4 tabstop=4 shiftwidth=4
let g:netrw_banner = 0 | let mapleader = "\<Space>"
filetype indent on | syntax on | filetype plugin on
au FileType yaml setlocal ai< ci< si< 
ino jk <esc>| nn K <nop>| nn U <nop>
com! Qa qa | com! QA qa | com! Q q|                                                             " typo friendly commands. 'w' commands are separate lines (not |) Parser treats | as filename
com! WQ wq
com! Wq wq
com! W w
com! E Explore|                                                                                 " Enforce Explore shorthand command (in case of ambiguity eg. Emmet)
vm < <gv | vm > >gv|                                                                            " visual mode indenting
vn <leader>s "vy :%s/<C-R>v//g<Left><Left>|                                                     " search visual
vn <leader>S "vy :%s//<C-R>v/g<C-b><Right><Right><Right>|                                       " search visual
nn <leader>s :%sno/<C-R><C-W>//g<Left><Left>|                                                   " search
nn <leader>S :%sno//<C-R><C-W>/g<C-b><Right><Right><Right><Right><Right>|                       " search 
nn <leader>z :noh<CR>                                                                           " search  highlight
nn <leader>0 :set scroll=0<CR>                                                                  " scroll reset
vn  <C-y> "*y                                                                                   " yank into clipboard 
vn  <C-p> "*p                                                                                   " paste from clipboard 
nn  <C-j> :m .+1<CR>==| nn <C-k> :m .-2<CR>==|                                                  " shuffle line one up or down Normal mode
ino <C-j> <Esc>:m .+1<CR>==gi| ino <C-k> <Esc>:m .-2<CR>==gi|                                   " shuffle line one up or down Insert mode
vn  <C-j> :m '>+1<CR>gv=gv| vn <C-k> :m '<-2<CR>gv=gv|                                          " shuffle line one up or down Visual mode
nn <C-w>v :echo "disabled"<CR>
nn <C-w>s :echo "disabled"<CR>
nor <leader>; :call nerdcommenter#Comment(1, 'toggle')<CR>|                                     " NERD commenter installed in setup.sh
nn <leader><leader> :FuzzyFilesRoot<CR>|                              
nn <leader>/ :FuzzyGrep<CR>|
nn <leader>m :FuzzyMruRoot<CR>|
let g:fuzzyy_keymaps = {'preview_up_half_page':[], 'delete_all': ["\<c-u>"]}
fu! WriteTmpPath()
  let l:dir = system('git rev-parse --show-toplevel | md5')
  let l:dir = substitute(l:dir, '\n', '', 'g')
  call writefile([expand('%:p')], '/tmp/' . l:dir)
endf
au BufNewFile,BufRead,ModeChanged,FocusGained * :call WriteTmpPath()
fu! OnFocus() 
    execute 'rv /tmp/viminfo'
endf
au VimEnter,FocusGained * :call OnFocus()
fu! OnBlur() 
    execute 'wv /tmp/viminfo'
endf
au VimLeave,FocusLost * :call OnBlur()
" BQN
let a ='`1234567890-= ~!@#$%^&*()_+ qwertyuiop[]  QWERTYUIOP{} asdfghjkl;''\ ASDFGHJKL:"| zxcvbnm,./    ZXCVBNM<>?   '
let b ='˜˘¨⁼⌜´˝7∞¯•÷× ¬⎉⚇⍟◶⊘⎊⍎⍕⟨⟩√⋆ ⌽𝕨∊↑∧y⊔⊏⊐π←→  ↙𝕎⍷𝕣⍋YU⊑⊒⍳⊣⊢ ⍉𝕤↕𝕗𝕘⊸∘○⟜⋄↩\  ↖𝕊D𝔽𝔾«J⌾»·˙| ⥊𝕩↓∨⌊n≡∾≍≠    ⋈𝕏C⍒⌈N≢≤≥⇐   '
let[a,b]=map([a,b],{i,x->split(x,'\zs *')}) | let a+=['<space>']|let b+=['‿']
for l in ['i','c']| for i in range(len(a)) |
    exe escape(l.'no'.'\'.a[i].' '.b[i],'|')
endfor |endfor
unl a b l i
au BufRead,BufNewFile * if getline(1) =~ '^#!.*bqn$' | setf bqn | endif
au BufRead,BufNewFile *.bqn setf bqn
au FileType bqn syn match bqncom "#.*$"
au FileType bqn hi link bqncom comment
au FileType bqn setlocal softtabstop=2 tabstop=2 shiftwidth=2 expandtab cms=#%s
fu! BQN_Exp(l)
  echo system('be ' . '"'.escape(a:l, "`\"'").'"')
endf
vn <leader>e "vy :call BQN_Exp(@v)<cr>
nn <leader>e :call BQN_Exp(getline('.'))<cr>
