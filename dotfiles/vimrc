set nocompatible autoindent laststatus=2 relativenumber nu smartcase nopaste nowrap expandtab 
set noswapfile nobackup nowritebackup shiftwidth=2 softtabstop=2 tabstop=2 is
set backspace=indent,eol,start hlsearch path+=** wildmenu undofile undodir=~/.vim/undodir 
let g:netrw_banner = 0 | let mapleader = "\<Space>"
filetype indent plugin on | syntax on | ino jk <esc>
com! Qa qa | com! QA qa | com! Q q|                                                             " typo friendly commands. 'w' commands are separate lines (not |) Parser treats | as filename
com! WQ wq
com! Wq wq
com! W w
vm < <gv | vm > >gv|                                                                            " visual mode indenting
vn <leader>s "vy :%s/<C-R>v//g<Left><Left>|                                                     " search visual
vn <leader>S "vy :%s//<C-R>v/g<C-b><Right><Right><Right>|                                       " search visual
nn <leader>s :%sno/<C-R><C-W>//g<Left><Left>|                                                   " search
nn <leader>S :%sno//<C-R><C-W>/g<C-b><Right><Right><Right><Right><Right>|                       " search 
nn <leader>z :noh<CR>                                                                           " search  highlight
nn <leader>0 :set scroll=0<CR>                                                                  " scroll reset
nn  <C-j> :m .+1<CR>==| nn <C-k> :m .-2<CR>==|                                                   " shuffle line one up or down Normal mode
ino <C-j> <Esc>:m .+1<CR>==gi| ino <C-k> <Esc>:m .-2<CR>==gi|                                   " shuffle line one up or down Insert mode
vn  <C-j> :m '>+1<CR>gv=gv| vn <C-k> :m '<-2<CR>gv=gv|                                           " shuffle line one up or down Visual mode

function! Fzy(cmd, act)
  try | let o = system(a:cmd . " | fzy ") | catch /Vim:Interrupt/ | endtry| " Swallow errors from ^C, allow redraw! below
  redraw!
  if v:shell_error == 0 && !empty(o) | exec a:act . ' ' . split(split(o, '\n')[0], ':')[0] | endif
endf
nn <leader><leader> :call Fzy("rg . -l", ":e")<cr>
nn <leader>/ :call Fzy("rg .", ":e")<cr>

function! Comment(type, ...)
  let ms=split(substitute(substitute(&cms,'\S\zs%s',' %s',''),'%s\ze\S','%s ',''),'%s',1)
  let lhs=escape(substitute(ms[0],' ','',''),'*')|let rhs=escape(substitute(ms[1],' ','',''),'*')
  let r = a:0 ? "'<,'>" : "'[,']"
  if match(getline('.'), lhs) == 0
    exe "norm! :".r."s]^".lhs."]\<CR>`".(a:0?'<':'[') | exe "norm! :".r."s]".rhs."$]]\<CR>`".(a:0?'<':'[')
  else
    exe "norm! :".r."s]^]".lhs."\<CR>`".(a:0?'<':'[') | exe "norm! :".r."s]$]".rhs."\<CR>`".(a:0?'<':'[')
  endif
endf
no <leader>; :<C-u>set opfunc=Comment<bar>execute "norm! " . v:count1 . "g@_"<CR>
xn <leader>; :<C-u>call Comment(visualmode(), 1)<CR>

" BQN
scripte utf-8 
imap\` ˜| imap \1 ˘| imap\2 ¨| imap\3 ⁼| imap\4 ⌜| imap\5 ´| imap\6 ˝| imap\7 7| imap\8 ∞| imap\9 ¯| imap\0 •| imap\- ÷| imap\= ×| imap\~ ¬| imap\! ⎉| imap\@ ⚇| imap\# ⍟| imap\$ ◶| imap\% ⊘| imap\^ ⎊| imap\& ⍎| imap\* ⍕| imap\( ⟨| imap\) ⟩| imap\_ √| imap\+ ⋆| imap\q ⌽| imap\w 𝕨| imap\e ∊| imap\r ↑| imap\t ∧| imap\y y| imap\u ⊔| imap\i ⊏| imap\o ⊐| imap\p π| imap\[ ←| imap\] →| imap\Q ↙| imap\W 𝕎| imap\E ⍷| imap\R 𝕣| imap\T ⍋| imap\Y Y| imap\U U| imap\I ⊑| imap\O ⊒| imap\P ⍳| imap\{ ⊣| imap\} ⊢| imap\a ⍉| imap\s 𝕤| imap\d ↕| imap\f 𝕗| imap\g 𝕘| imap\h ⊸| imap\j ∘| imap\k ○| imap\l ⟜| imap\; ⋄| imap\' ↩| imap\\ \| imap\A ↖| imap\S 𝕊| imap\D D| imap\F 𝔽| imap\G 𝔾| imap\H «| imap\J J| imap\K ⌾| imap\L »| imap\: ·| imap\" ˙| imap\\| \|| imap\z ⥊| imap\x 𝕩| imap\c ↓| imap\v ∨| imap\b ⌊| imap\n n| imap\m ≡| imap\, ∾| imap\. ≍| imap\/ ≠
imap\Z ⋈| imap\X 𝕏| imap\C C| imap\V ⍒| imap\B ⌈| imap\N N| imap\M ≢| imap\< ≤| imap\> ≥| imap\? ⇐| imap\<space> ‿| imap\` ˜| imap\1 ˘| imap\2 ¨| imap\3 ⁼| imap\4 ⌜| imap\5 ´| imap\6 ˝| imap\7 7| imap\8 ∞| imap\9 ¯| imap\0 •| imap\- ÷| imap\= ×| imap\~ ¬| imap\! ⎉| imap\@ ⚇| imap\# ⍟| imap\$ ◶| imap\% ⊘| imap\^ ⎊| imap\& ⍎| imap\* ⍕| imap\( ⟨| imap\) ⟩| imap\_ √| imap\+ ⋆| imap\q ⌽| imap\w 𝕨| imap\e ∊| imap\r ↑| imap\t ∧| imap\y y| imap\u ⊔| imap\i ⊏| imap\o ⊐| imap\p π| imap\[ ←| imap\] →| imap\Q ↙| imap\W 𝕎| imap\E ⍷| imap\R 𝕣| imap\T ⍋| imap\Y Y| imap\U U| imap\I ⊑| imap\O ⊒| imap\P ⍳| imap\{ ⊣| imap\} ⊢| imap\a ⍉| imap\s 𝕤| imap\d ↕| imap\f 𝕗| imap\g 𝕘| imap\h ⊸| imap\j ∘| imap\k ○| imap\l ⟜| imap\; ⋄| imap\' ↩| imap\\ \| imap\A ↖| imap\S 𝕊| imap\D D| imap\F 𝔽| imap\G 𝔾| imap\H «| imap\J J| imap\K ⌾| imap\L »| imap\: ·| imap\" ˙
imap\\| \|| imap\z ⥊| imap\x 𝕩| imap\c ↓| imap\v ∨| imap\b ⌊| imap\n n| imap\m ≡| imap\, ∾| imap\. ≍| imap\/ ≠| imap\Z ⋈| imap\X 𝕏| imap\C C| imap\V ⍒| imap\B ⌈| imap\N N| imap\M ≢| imap\< ≤| imap\> ≥| imap\? ⇐| imap\<space> ‿
cmap\` ˜| cmap \1 ˘| cmap\2 ¨| cmap\3 ⁼| cmap\4 ⌜| cmap\5 ´| cmap\6 ˝| cmap\7 7| cmap\8 ∞| cmap\9 ¯| cmap\0 •| cmap\- ÷| cmap\= ×| cmap\~ ¬| cmap\! ⎉| cmap\@ ⚇| cmap\# ⍟| cmap\$ ◶| cmap\% ⊘| cmap\^ ⎊| cmap\& ⍎| cmap\* ⍕| cmap\( ⟨| cmap\) ⟩| cmap\_ √| cmap\+ ⋆| cmap\q ⌽| cmap\w 𝕨| cmap\e ∊| cmap\r ↑| cmap\t ∧| cmap\y y| cmap\u ⊔| cmap\i ⊏| cmap\o ⊐| cmap\p π| cmap\[ ←| cmap\] →| cmap\Q ↙| cmap\W 𝕎| cmap\E ⍷| cmap\R 𝕣| cmap\T ⍋| cmap\Y Y| cmap\U U| cmap\I ⊑| cmap\O ⊒| cmap\P ⍳| cmap\{ ⊣| cmap\} ⊢| cmap\a ⍉| cmap\s 𝕤| cmap\d ↕| cmap\f 𝕗| cmap\g 𝕘| cmap\h ⊸| cmap\j ∘| cmap\k ○| cmap\l ⟜| cmap\; ⋄| cmap\' ↩| cmap\\ \| cmap\A ↖| cmap\S 𝕊| cmap\D D| cmap\F 𝔽| cmap\G 𝔾| cmap\H «| cmap\J J| cmap\K ⌾| cmap\L »| cmap\: ·| cmap\" ˙| cmap\\| \|| cmap\z ⥊| cmap\x 𝕩| cmap\c ↓| cmap\v ∨| cmap\b ⌊| cmap\n n| cmap\m ≡| cmap\, ∾| cmap\. ≍| cmap\/ ≠
cmap\Z ⋈| cmap\X 𝕏| cmap\C C| cmap\V ⍒| cmap\B ⌈| cmap\N N| cmap\M ≢| cmap\< ≤| cmap\> ≥| cmap\? ⇐| cmap\<space> ‿| cmap\` ˜| cmap\1 ˘| cmap\2 ¨| cmap\3 ⁼| cmap\4 ⌜| cmap\5 ´| cmap\6 ˝| cmap\7 7| cmap\8 ∞| cmap\9 ¯| cmap\0 •| cmap\- ÷| cmap\= ×| cmap\~ ¬| cmap\! ⎉| cmap\@ ⚇| cmap\# ⍟| cmap\$ ◶| cmap\% ⊘| cmap\^ ⎊| cmap\& ⍎| cmap\* ⍕| cmap\( ⟨| cmap\) ⟩| cmap\_ √| cmap\+ ⋆| cmap\q ⌽| cmap\w 𝕨| cmap\e ∊| cmap\r ↑| cmap\t ∧| cmap\y y| cmap\u ⊔| cmap\i ⊏| cmap\o ⊐| cmap\p π| cmap\[ ←| cmap\] →| cmap\Q ↙| cmap\W 𝕎| cmap\E ⍷| cmap\R 𝕣| cmap\T ⍋| cmap\Y Y| cmap\U U| cmap\I ⊑| cmap\O ⊒| cmap\P ⍳| cmap\{ ⊣| cmap\} ⊢| cmap\a ⍉| cmap\s 𝕤| cmap\d ↕| cmap\f 𝕗| cmap\g 𝕘| cmap\h ⊸| cmap\j ∘| cmap\k ○| cmap\l ⟜| cmap\; ⋄| cmap\' ↩| cmap\\ \| cmap\A ↖| cmap\S 𝕊| cmap\D D| cmap\F 𝔽| cmap\G 𝔾| cmap\H «| cmap\J J| cmap\K ⌾| cmap\L »| cmap\: ·| cmap\" ˙
cmap\\| \|| cmap\z ⥊| cmap\x 𝕩| cmap\c ↓| cmap\v ∨| cmap\b ⌊| cmap\n n| cmap\m ≡| cmap\, ∾| cmap\. ≍| cmap\/ ≠| cmap\Z ⋈| cmap\X 𝕏| cmap\C C| cmap\V ⍒| cmap\B ⌈| cmap\N N| cmap\M ≢| cmap\< ≤| cmap\> ≥| cmap\? ⇐| cmap\<space> ‿
au BufRead,BufNewFile * if getline(1) =~ '^#!.*bqn$' | setf bqn | endif
au BufRead,BufNewFile *.bqn setlocal commentstring=#%s
au BufRead,BufNewFile *.bqn setf bqn
au BufRead,BufNewFile *.bqn syn match bqncom "#.*$"
au BufRead,BufNewFile *.bqn hi link bqncom comment

